{
	"name": "ISO 25010 CSharp Quality Model",
	"tqi": {
		"name": "Total Software Quality",
		"description": "Sample tqi description",
		"weights": {
			"Performance Efficiency": 0.2,
			"Compatability": 0.1,
			"Usability": 0.1,
			"Reliability": 0.1,
			"Security": 0.3,
			"Maintainability": 0.1,
			"Portability": 0.1
		}
	},
	"characteristics": [
		{
			"name": "Performance Efficiency",
			"description": "This characteristic represents the performance relative to the amount of resources used under stated conditions.",
			"weights": {
				"Data Type Integrity": 0.1,
				"Exception Handling": 0.1,
				"Format": 0.1,
				"Functional Syntax": 0.1,
				"Resource Handling": 0.4,
				"Structure": 0.2
			}
		},
		{
			"name": "Compatability",
			"description": "Degree to which a product, system or component can exchange information with other products, systems or components, and/or perform its required functions while sharing the same hardware or software environment.",
			"weights": {
				"Data Type Integrity": 0.1,
				"Exception Handling": 0.1,
				"Format": 0.3,
				"Functional Syntax": 0.2,
				"Resource Handling": 0.1,
				"Structure": 0.2
			}
		},
		{
			"name": "Usability",
			"description": "Degree to which a product or system can be used by specified users to achieve specified goals with effectiveness, efficiency and satisfaction in a specified context of use.",
			"weights": {
				"Data Type Integrity": 0.1,
				"Exception Handling": 0.1,
				"Format": 0.3,
				"Functional Syntax": 0.2,
				"Resource Handling": 0.1,
				"Structure": 0.2
			}
		},
		{
			"name": "Reliability",
			"description": "Degree to which a system, product or component performs specified functions under specified conditions for a specified period of time.",
			"weights": {
				"Data Type Integrity": 0.3,
				"Exception Handling": 0.2,
				"Format": 0.1,
				"Functional Syntax": 0.1,
				"Resource Handling": 0.1,
				"Structure": 0.2
			}
		},
		{
			"name": "Security",
			"description": "Degree to which a product or system protects information and data so that persons or other products or systems have the degree of data access appropriate to their types and levels of authorization.",
			"weights": {
				"Data Type Integrity": 0.2,
				"Exception Handling": 0.1,
				"Format": 0.2,
				"Functional Syntax": 0.2,
				"Resource Handling": 0.1,
				"Structure": 0.2
			}
		},
		{
			"name": "Maintainability",
			"description": "This characteristic represents the degree of effectiveness and efficiency with which a product or system can be modified to improve it, correct it or adapt it to changes in environment, and in requirements.",
			"weights": {
				"Data Type Integrity": 0.05,
				"Exception Handling": 0.1,
				"Format": 0.3,
				"Functional Syntax": 0.2,
				"Resource Handling": 0.05,
				"Structure": 0.3
			}
		},
		{
			"name": "Portability",
			"description": "Degree of effectiveness and efficiency with which a system, product or component can be transferred from one hardware, software or other operational or usage environment to another.",
			"weights": {
				"Data Type Integrity": 0.1,
				"Exception Handling": 0.1,
				"Format": 0.3,
				"Functional Syntax": 0.2,
				"Resource Handling": 0.1,
				"Structure": 0.2
			}
		}
	],
	"properties": [
		{
			"name": "Data Type Integrity",
			"description": "A representation of how well each object adheres to C# object oriented typing expectations.",
			"positive_impact": "false",
			"thresholds": [
				0.0,
				0.004,
				0.02
			],
			"measure": {
				"name": "Data Type Integrity Findings",
				"description": "The data type integrity property is measured by static analysis tools that can collect findings categorized under source code data type faults.",
				"diagnostics": [
					{
						"name": "RCS1008",
						"description": "Use explicit type instead of 'var' (when the type is not obvious)",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1009",
						"description": "Use explicit type instead of 'var' (foreach variable)",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1010",
						"description": "Use 'var' instead of explicit type (when the type is obvious)",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1012",
						"description": "Use explicit type instead of 'var' (when the type is obvious)",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1013",
						"description": "Use predefined type",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1014",
						"description": "Avoid implicitly-typed array",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1135",
						"description": "Declare enum member with zero value (when enum has FlagsAttribute)",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1177",
						"description": "Use 'var' instead of explicit type (in foreach)",
						"toolName": "Roslynator"
					},
					{
						"name": "TODO",
						"description": "TODO",
						"toolName": "Roslynator"
					}
				]
			}
		},
		{
			"name": "Documentation",
			"description": "Information about the source code intended to assist human understanding.",
			"positive_impact": "false",
			"thresholds": [
				0.0,
				0.004,
				0.02
			],
			"measure": {
				"name": "Documentation Findings",
				"description": "The documentation property is measured by static analysis tools that can collect findings categorized under source code documentation faults.",
				"diagnostics": [
					{
						"name": "RCS1138",
						"description": "Add summary to documentation comment",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1139",
						"description": "Add summary element to documentation comment",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1140",
						"description": "Add exception to documentation comment",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1141",
						"description": "Add 'param' element to documentation comment",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1142",
						"description": "Add 'typeparam' element to documentation comment",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1181",
						"description": "Convert comment to documentation comment",
						"toolName": "Roslynator"
					},
					{
						"name": "",
						"description": "",
						"toolName": "Roslynator"
					}
				]
			}
		},
		{
			"name": "Exception Handling",
			"description": "Goodness of approach in handling exceptions in a compliant and productive way.",
			"positive_impact": "false",
			"thresholds": [
				0.0,
				0.004,
				0.02
			],
			"measure": {
				"name": "Exception Handling Findings",
				"description": "The exception handling property is measured by static analysis tools that can collect findings categorized under source code exception handling faults.",
				"diagnostics": [
					{
						"name": "RCS1044",
						"description": "Remove original exception from throw statement",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1075",
						"description": "Avoid empty catch clause that catches System.Exception",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1194",
						"description": "Implement exception constructors",
						"toolName": "Roslynator"
					},
					{
						"name": "TODO",
						"description": "TODO",
						"toolName": "Roslynator"
					}
				]
			}
		},
		{
			"name": "Format",
			"description": "Code formatting. This involves how the code is written as it appears to a human reader. Common synonyms include 'Style', 'Simplification', 'Readability', 'Convention', 'Verbosity', 'Naming'.",
			"positive_impact": "false",
			"thresholds": [
				0.0,
				0.004,
				0.02
			],
			"measure": {
				"name": "Format Findings",
				"description": "The format property is measured by static analysis tools that can collect findings categorized under source code format faults.",
				"diagnostics": [
					{
						"name": "RCS1001",
						"description": "Add braces (when expression spans over multiple lines)",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1002",
						"description": "Remove braces",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1003",
						"description": "Add braces to if-else (when expression spans over multiple lines)",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1004",
						"description": "Remove braces from if-else",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1005",
						"description": "Simplify nested using statement",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1006",
						"description": "Merge else clause with nested if statement",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1007",
						"description": "Add braces",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1016",
						"description": "Use expression-bodied member",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1017",
						"description": "Avoid multiline expression body",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1018",
						"description": "Add accessibility modifiers",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1019",
						"description": "Order modifiers",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1020",
						"description": "Simplify Nullable<T> to T?",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1021",
						"description": "Simplify lambda expression",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1024",
						"description": "Format accessor list",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1025",
						"description": "Add new line before enum member",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1026",
						"description": "Add new line before statement",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1027",
						"description": "Add new line before embedded statement",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1028",
						"description": "Add new line after switch label",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1029",
						"description": "Format binary operator on next line",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1030",
						"description": "Add empty line after embedded statement",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1031",
						"description": "Remove unnecessary braces",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1032",
						"description": "Remove redundant parentheses",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1033",
						"description": "Remove redundant boolean literal",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1034",
						"description": "Remove redundant 'sealed' modifier",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1035",
						"description": "Remove redundant comma in initializer",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1036",
						"description": "Remove redundant empty line",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1037",
						"description": "Remove trailing white-space",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1038",
						"description": "Remove empty statement",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1039",
						"description": "Remove argument list from attribute",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1040",
						"description": "Remove empty else clause",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1041",
						"description": "Remove empty initializer",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1042",
						"description": "Remove enum default underlying type",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1043",
						"description": "Remove 'partial' modifier from type with a single part",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1045",
						"description": "Rename private field according to camel case with underscore",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1046",
						"description": "Asynchronous method name should end with 'Async'",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1047",
						"description": "Non-asynchronous method name should not end with 'Async'",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1049",
						"description": "Simplify boolean comparison",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1050",
						"description": "Add argument list to object creation expression",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1051",
						"description": "Parenthesize condition in conditional expression",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1057",
						"description": "Add empty line between declarations",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1058",
						"description": "Use compound assignment",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1068",
						"description": "Simplify logical negation",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1073",
						"description": "Convert 'if' to 'return' statement",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1094",
						"description": "Declare using directive on top level",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1103",
						"description": "Convert 'if' to assignment",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1104",
						"description": "Simplify conditional expression",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1104",
						"description": "Simplify conditional expression",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1128",
						"description": "Use coalesce expression",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1134",
						"description": "Remove redundant statement",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1154",
						"description": "Sort enum members",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1172",
						"description": "Use 'is' operator instead of 'as' operator",
						"toolName": "Roslynator"
					},
					{
						"name": "",
						"description": "",
						"toolName": "Roslynator"
					}
				]
			}
		},
		{
			"name": "Functional Semantics",
			"description": "The meaning and intended output of funtional acts.  For example, dividing all items in a list by two versus multiplying all items by two have different functional semantics.",
			"positive_impact": "false",
			"thresholds": [
				0.0,
				0.004,
				0.02
			],
			"measure": {
				"name": "Functional Semantics Findings",
				"description": "The functional semantics property is measured by static analysis tools that can collect findings categorized under source code functional semantics faults.",
				"diagnostics": [
					{
						"name": "RCS1155",
						"description": "Use StringComparison when comparing strings",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1156",
						"description": "Use string.Length instead of comparison with empty string",
						"toolName": "Roslynator"
					},
					{
						"name": "",
						"description": "",
						"toolName": "Roslynator"
					}
				]
			}
		},
		{
			"name": "Functional Syntax",
			"description": "The operators, syntactic decision, object selection, etc., that determine how a functional act is defined. This is disjoint from the 'Format' property by having potential impact on more than just human-readability.",
			"positive_impact": "false",
			"thresholds": [
				0.0,
				0.004,
				0.02
			],
			"measure": {
				"name": "Functional Syntax Findings",
				"description": "The function syntax property is measured by static analysis tools that can collect findings categorized under source code funciton syntax faults.",
				"diagnostics": [
					{
						"name": "RCS1048",
						"description": "Use lambda expression instead of anonymous method",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1061",
						"description": "Merge if statement with nested if statement",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1077",
						"description": "Optimize LINQ method call",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1080",
						"description": "Use 'Count/Length' property instead of 'Any' method",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1096",
						"description": "Use bitwise operation instead of calling 'HasFlag'",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1113",
						"description": "Use 'string.IsNullOrEmpty' method",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1146",
						"description": "Use conditional access",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1165",
						"description": "Unconstrained type parameter checked for null",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1197",
						"description": "Optimize StringBuilder.Append/AppendLine call",
						"toolName": "Roslynator"
					},
					{
						"name": "",
						"description": "",
						"toolName": "Roslynator"
					}
				]
			}
		},
		{
			"name": "Resource Handling",
			"description": "Management of resources: often related to locking of instances and file I/O.",
			"positive_impact": "false",
			"thresholds": [
				0.0,
				0.004,
				0.02
			],
			"measure": {
				"name": "",
				"description": "The resource handling property is measured by static analysis tools that can collect findings categorized under source code resource handling faults.",
				"diagnostics": [
					{
						"name": "RCS1059",
						"description": "Avoid locking on publicly accessible instance",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1090",
						"description": "Call 'ConfigureAwait(false)'",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1159",
						"description": "Use EventHandler<T>",
						"toolName": "Roslynator"
					},
					{
						"name": "",
						"description": "",
						"toolName": "Roslynator"
					}
				]
			}
		},
		{
			"name": "Structure",
			"description": "The organization of classes, files, and methods. Includes object oriented concepts such as inheritance",
			"positive_impact": "false",
			"thresholds": [
				0.0,
				0.004,
				0.02
			],
			"measure": {
				"name": "",
				"description": "The structure property is measured by static analysis tools that can collect findings categorized under source code structure faults.",
				"diagnostics": [
					{
						"name": "RCS1060",
						"description": "Declare each type in separate file",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1085",
						"description": "Use auto-implemented property",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1102",
						"description": "Make class static",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1110",
						"description": "Declare type inside namespace",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1157",
						"description": "Composite enum value contains undefined flag",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1158",
						"description": "Static member in generic type should use a type parameter",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1160",
						"description": "Abstract type should not have public constructors",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1161",
						"description": "Enum should declare explicit values",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1168",
						"description": "Parameter name differs from base name",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1169",
						"description": "Make field read-only",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1170",
						"description": "Use read-only auto-implemented property",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1187",
						"description": "Use constant instead of field",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1193",
						"description": "Overriding member cannot change 'params' modifier",
						"toolName": "Roslynator"
					},
					{
						"name": "RCS1194",
						"description": "Implement exception constructors",
						"toolName": "Roslynator"
					},
					{
						"name": "",
						"description": "",
						"toolName": "Roslynator"
					}
				]
			}
		},
		{
			"name": "",
			"description": "",
			"positive_impact": "false",
			"thresholds": [
				0.0,
				0.004,
				0.02
			],
			"measure": {
				"name": "",
				"description": "The __ property is measured by static analysis tools that can collect findings categorized under source code __ faults.",
				"diagnostics": [
					{
						"name": "",
						"description": "",
						"toolName": "Roslynator"
					}
				]
			}
		}
	]
}