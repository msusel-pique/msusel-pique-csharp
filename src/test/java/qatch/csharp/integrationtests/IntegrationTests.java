package qatch.csharp.integrationtests;

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.commons.io.FilenameUtils;
import org.junit.Assert;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import qatch.analysis.Diagnostic;
import qatch.csharp.Roslynator;
import qatch.csharp.runnable.QualityModelDeriverCSharp;
import qatch.csharp.runnable.SingleProjectEvaluation;
import qatch.evaluation.Project;
import qatch.model.QualityModel;

import java.io.*;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Map;
import java.util.Properties;

@Category(IntegrationTest.class)
public class IntegrationTests {

    private final Path TARGET = Paths.get("src/test/resources/projects/TestNetFramework");
    private final Path TEST_OUT = Paths.get("src/test/out");
    private final Path TEST_QM = Paths.get("src/test/resources/quality_models/basic_roslynator_qm.json");
    private final String ROSLYN_NAME = "Roslynator",
                         TOOLS_LOC   = "src/main/resources/tools";

    @Test
    public void testQualityModelDeriver() {

        /*
         * @param args configuration array in following order:
         *      0: Path to quality model description file
         *      1: Path to benchmark repository directory
         *      2: Path to comparison matrices directory
         *      3: Temporary path to file to fill with tool scan analysis results. This should be a filename
         *         path such as a/b/benchmark_data.csv.  Does not need to exist.
         *      4: Temporary path to desired directory to hold the output of running the R Thresholds script.
         *      5: Temporary path to directory to store the weights.json file generated by R analysis.
         *      6: String flag, usually a file extension, that signals that a project to be analyzed is
         *         within the directory the flag was found in. For example, ".sln".
         *      7: Path to directory to place the derived quality model.
         */

        final Path qmPath = Paths.get("src/test/resources/quality_models/roslynator_scs_description.json");
        final Path benchmarkRepository = Paths.get("src/test/resources/projects/test_benchmark_repository");
        final Path comparisonMatrices = Paths.get("src/test/resources/comparison_matrices/test_qm_generator");
        final Path benchmarkData = Paths.get(TEST_OUT.toString(), "benchmark_data.csv");
        final Path thresholdOut = Paths.get("src/test/out");
        final Path weightsOut = Paths.get("src/test/out");
        final String flag =".sln";
        final Path output = Paths.get("out");

        QualityModelDeriverCSharp.main(new String[] {
                qmPath.toString(), benchmarkRepository.toString(),
                comparisonMatrices.toString(), benchmarkData.toString(),
                thresholdOut.toString(), weightsOut.toString(),
                flag, output.toString()
        });

        // TODO PICKUP: finish model deriver test
        System.out.println("...");
    }


    /**
     * Test entire analysis module procedure using Roslynator:
     *   (1) run Roslynator tool
     *   (2) parse: get object representation of the diagnostics described by the QM
     *   (3) make collection of diagnostic objects
     */
    @Test
    public void testRoslynatorAnalysis() throws IOException {

        // Initialize main objects
        Properties properties = new Properties();
        properties.load((new FileInputStream("src/test/resources/config/config.properties")));

        QualityModel qualityModel = new QualityModel(TEST_QM);
        Project project = new Project(FilenameUtils.getBaseName(TARGET.getFileName().toString()), TARGET, qualityModel);
        Roslynator roslynator = new Roslynator(ROSLYN_NAME, Paths.get(TOOLS_LOC), Paths.get(properties.getProperty("MSBUILD_BIN")));

        // (1) run Roslynator tool
        Path analysisOutput = roslynator.analyze(TARGET);

        // (2 and 3) parse: get object representation of the diagnostics described by the QM
        Map<String, Diagnostic> analysisResults = roslynator.parseAnalysis(analysisOutput);

        // Assert the results has the finidngs from the tool analysis scan
        Assert.assertEquals(3, analysisResults.size());
        Assert.assertEquals(2, analysisResults.get("RCS1018").getFindings().size());
        Assert.assertEquals(1, analysisResults.get("RCS1163").getFindings().size());
        Assert.assertEquals(1, analysisResults.get("SCS0005").getFindings().size());
    }


    /**
     * Test entire evaluation process on a C# project or solution.
     */
    @Test
    public void testSingleProjectEvaluation() throws IOException {

        // Run evaluation
        SingleProjectEvaluation.main(new String[] { TARGET.toString(), TEST_OUT.toString(), TEST_QM.toString() });

        // Handle results
        String projectName = FilenameUtils.getBaseName(TARGET.getFileName().toString());
        File evalResults = new File(
                TEST_OUT.toFile(),
                projectName + File.separator + projectName + "_evalResults.json"
        );
        FileReader fr = new FileReader(evalResults);
        JsonParser parser = new JsonParser();
        JsonObject data = (JsonObject) parser.parse(fr);
        fr.close();

        // Assert: Set up
        String jsonProjectName = data.getAsJsonPrimitive("name").getAsString();
        int loc = data.getAsJsonPrimitive("linesOfCode").getAsInt();
        String jsonQualityModelName = data.getAsJsonObject("qualityModel").getAsJsonPrimitive("name").getAsString();

        JsonObject jsonTqi = data.getAsJsonObject("qualityModel").getAsJsonObject("tqi");

        JsonObject characteristic01 = jsonTqi.getAsJsonObject("characteristics").getAsJsonObject("Characteristic 01");
        JsonObject characteristic01Property01 = characteristic01.getAsJsonObject("properties").getAsJsonObject("Property 01");
        JsonObject characteristic01Property02 = characteristic01.getAsJsonObject("properties").getAsJsonObject("Property 01");

        JsonObject characteristic02 = jsonTqi.getAsJsonObject("characteristics").getAsJsonObject("Characteristic 02");
        JsonObject characteristic02Property01 = characteristic02.getAsJsonObject("properties").getAsJsonObject("Property 01");
        JsonObject characteristic02Property02 = characteristic02.getAsJsonObject("properties").getAsJsonObject("Property 02");

        // Assert: Project basics
        Assert.assertTrue(evalResults.exists());
        Assert.assertEquals("TestNetFramework", jsonProjectName);
        Assert.assertEquals(39, loc);
        Assert.assertEquals("Test Roslynator Analysis", jsonQualityModelName);

        // Assert: Property values
        // TODO PICKUP: Set thresholds so that (0.0, 1.0) values return from analysis
        Assert.assertEquals(-1.0, characteristic01Property01.getAsJsonPrimitive("value").getAsDouble(), 0.000001);
        Assert.assertEquals(-1.0, characteristic01Property02.getAsJsonPrimitive("value").getAsDouble(), 0.000001);
        Assert.assertEquals(-1.0, characteristic02Property01.getAsJsonPrimitive("value").getAsDouble(), 0.000001);
        Assert.assertEquals(-1.0, characteristic02Property02.getAsJsonPrimitive("value").getAsDouble(), 0.000001);

        // Assert: Characteristic values
        // TODO PICKUP: Set thresholds so that (0.0, 1.0) values return from analysis
        Assert.assertEquals(-1.0, characteristic01.getAsJsonPrimitive("value").getAsFloat(), 0.000001);
        Assert.assertEquals(-1.0, characteristic02.getAsJsonPrimitive("value").getAsFloat(), 0.000001);

        // Assert: TQI
        // TODO PICKUP: Set thresholds so that (0.0, 1.0) values return from analysis
        Assert.assertEquals(-1.0, jsonTqi.getAsJsonPrimitive("value").getAsFloat(), 0.000001);
    }
}
