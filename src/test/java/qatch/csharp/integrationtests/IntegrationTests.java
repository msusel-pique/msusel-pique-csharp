package qatch.csharp.integrationtests;

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;
import org.junit.Assert;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import qatch.analysis.Diagnostic;
import qatch.csharp.Roslynator;
import qatch.csharp.runnable.QualityModelDeriverCSharp;
import qatch.csharp.runnable.SingleProjectEvaluation;
import qatch.evaluation.Project;
import qatch.model.QualityModel;

import java.io.*;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Map;
import java.util.Properties;

@Category(IntegrationTest.class)
public class IntegrationTests {

    private final Path TARGET = Paths.get("src/test/resources/projects/TestNetFramework");
    private final Path TEST_OUT = Paths.get("src/test/out");
    private final String ROSLYN_NAME = "Roslynator",
                         TOOLS_LOC   = "src/main/resources/tools";

    @Test
    public void testQualityModelDeriver() throws IOException {

        /*
         * @param args configuration array in following order:
         *      0: Path to quality model description file
         *      1: Path to benchmark repository directory
         *      2: Path to comparison matrices directory
         *      3: Temporary path to file to fill with tool scan analysis results. This should be a filename
         *         path such as a/b/benchmark_data.csv.  Does not need to exist.
         *      4: Temporary path to desired directory to hold the output of running the R Thresholds script.
         *      5: Temporary path to directory to store the weights.json file generated by R analysis.
         *      6: String flag, usually a file extension, that signals that a project to be analyzed is
         *         within the directory the flag was found in. For example, ".sln".
         *      7: Path to directory to place the derived quality model.
         */

        final Path qmPath = Paths.get("src/test/resources/quality_models/roslynator_scs_description.json");
        final Path benchmarkRepository = Paths.get("src/test/resources/projects/test_benchmark_repository");
        final Path comparisonMatrices = Paths.get("src/test/resources/comparison_matrices/test_qm_generator");
        final Path benchmarkData = Paths.get(TEST_OUT.toString(), "benchmark_data.csv");
        final Path thresholdOut = Paths.get("src/test/out");
        final Path weightsOut = Paths.get("src/test/out");
        final String flag =".sln";
        final Path output = Paths.get("out");

        QualityModelDeriverCSharp.main(new String[] {
                qmPath.toString(), benchmarkRepository.toString(),
                comparisonMatrices.toString(), benchmarkData.toString(),
                thresholdOut.toString(), weightsOut.toString(),
                flag, output.toString()
        });

        // Parse resulting QM file
        Path result = Paths.get(output.toString(), "qualityModel_CSharpRoslynatorTestQM.json");
        FileReader fr = new FileReader(result.toString());
        JsonObject jsonResults = new JsonParser().parse(fr).getAsJsonObject();
        fr.close();

        // Assert expected results
        JsonObject jsonTqi = jsonResults.getAsJsonObject("tqi");
        JsonObject jsonCharacteristics = jsonResults.getAsJsonObject("characteristics");
        JsonObject jsonChar01 = jsonCharacteristics.getAsJsonObject("Characteristic 01");
        JsonObject jsonChar02 = jsonCharacteristics.getAsJsonObject("Characteristic 02");
        JsonObject jsonProperties = jsonResults.getAsJsonObject("properties");
        JsonObject jsonProperty01 = jsonProperties.getAsJsonObject("Property 01");
        JsonObject jsonProperty02 = jsonProperties.getAsJsonObject("Property 02");

        Assert.assertEquals("CSharp Roslynator Test QM", jsonResults.getAsJsonPrimitive("name").getAsString());

        Assert.assertEquals("TQI", jsonTqi.getAsJsonPrimitive("name").getAsString());
        Assert.assertEquals(0.6667, jsonTqi.getAsJsonObject("weights").getAsJsonPrimitive("Characteristic 01").getAsDouble(), 0.0001);
        Assert.assertEquals(0.3333, jsonTqi.getAsJsonObject("weights").getAsJsonPrimitive("Characteristic 02").getAsDouble(), 0.0001);

        Assert.assertEquals(0.25, jsonChar01.getAsJsonObject("weights").getAsJsonPrimitive("Property 01").getAsDouble(), 0.0001);
        Assert.assertEquals(0.75, jsonChar01.getAsJsonObject("weights").getAsJsonPrimitive("Property 02").getAsDouble(), 0.0001);

        Assert.assertEquals(0.8, jsonChar02.getAsJsonObject("weights").getAsJsonPrimitive("Property 01").getAsDouble(), 0.0001);
        Assert.assertEquals(0.2, jsonChar02.getAsJsonObject("weights").getAsJsonPrimitive("Property 02").getAsDouble(), 0.0001);

        Assert.assertEquals(0.0385, jsonProperty01.getAsJsonArray("thresholds").get(0).getAsFloat(), 0.0001);
        Assert.assertEquals(0.0667, jsonProperty01.getAsJsonArray("thresholds").get(1).getAsFloat(), 0.0001);
        Assert.assertEquals(0.0976, jsonProperty01.getAsJsonArray("thresholds").get(2).getAsFloat(), 0.0001);

        Assert.assertEquals(0.0, jsonProperty02.getAsJsonArray("thresholds").get(0).getAsFloat(), 0.0001);
        Assert.assertEquals(0.00, jsonProperty02.getAsJsonArray("thresholds").get(1).getAsFloat(), 0.0001);
        Assert.assertEquals(0.0244, jsonProperty02.getAsJsonArray("thresholds").get(2).getAsFloat(), 0.0001);

    }


    /**
     * Test entire analysis module procedure using Roslynator:
     *   (1) run Roslynator tool
     *   (2) parse: get object representation of the diagnostics described by the QM
     *   (3) make collection of diagnostic objects
     */
    @Test
    public void testRoslynatorAnalysis() throws IOException {

        // Initialize main objects
        Path qm = Paths.get("src/test/resources/quality_models/basic_roslynator_qm.json");
        Properties properties = new Properties();
        properties.load((new FileInputStream("src/test/resources/config/config.properties")));

        Roslynator roslynator = new Roslynator(ROSLYN_NAME, Paths.get(TOOLS_LOC), Paths.get(properties.getProperty("MSBUILD_BIN")));

        // (1) run Roslynator tool
        Path analysisOutput = roslynator.analyze(TARGET);

        // (2 and 3) parse: get object representation of the diagnostics described by the QM
        Map<String, Diagnostic> analysisResults = roslynator.parseAnalysis(analysisOutput);

        // Assert the results has the finidngs from the tool analysis scan
        Assert.assertEquals(3, analysisResults.size());
        Assert.assertEquals(2, analysisResults.get("RCS1018").getFindings().size());
        Assert.assertEquals(1, analysisResults.get("RCS1163").getFindings().size());
        Assert.assertEquals(1, analysisResults.get("SCS0005").getFindings().size());
    }


    /**
     * Test entire evaluation process on a C# project or solution.
     */
    @Test
    public void testSingleProjectEvaluation() throws IOException {

        // Initialize config
        Path qm = Paths.get("src/test/resources/quality_models/test_single_project_eval_qm.json");

        // Run evaluation
        SingleProjectEvaluation.main(new String[] { TARGET.toString(), TEST_OUT.toString(), qm.toString() });

        // Handle results
        String projectName = FilenameUtils.getBaseName(TARGET.getFileName().toString());
        File evalResults = new File(
                TEST_OUT.toFile(),
                projectName + File.separator + projectName + "_evalResults.json"
        );
        FileReader fr = new FileReader(evalResults);
        JsonParser parser = new JsonParser();
        JsonObject data = (JsonObject) parser.parse(fr);
        fr.close();

        JsonObject additionalData = data.getAsJsonObject("additionalData");
        JsonObject jsonTqi = data.getAsJsonObject("tqi");
        JsonObject jsonCharacteristics = data.getAsJsonObject("characteristics");
        JsonObject jsonChar01 = jsonCharacteristics.getAsJsonObject("Characteristic 01");
        JsonObject jsonChar02 = jsonCharacteristics.getAsJsonObject("Characteristic 02");
        JsonObject jsonProperties = data.getAsJsonObject("properties");
        JsonObject jsonProperty01 = jsonProperties.getAsJsonObject("Property 01");
        JsonObject jsonProperty02 = jsonProperties.getAsJsonObject("Property 02");
        JsonObject jsonMeasure01 = jsonProperty01.getAsJsonObject("measure");
        JsonObject jsonMeasure02 = jsonProperty02.getAsJsonObject("measure");

        // Asserts
        Assert.assertEquals("TestNetFramework", additionalData.getAsJsonPrimitive("projectName").getAsString());
        Assert.assertEquals("39", additionalData.getAsJsonPrimitive("projectLinesOfCode").getAsString());

        Assert.assertEquals("Test Roslynator Analysis", data.getAsJsonPrimitive("name").getAsString());

        Assert.assertEquals("TQI", jsonTqi.getAsJsonPrimitive("name").getAsString());
        Assert.assertEquals(0.4419, jsonTqi.getAsJsonPrimitive("value").getAsFloat(), 0.001);
        Assert.assertEquals(0.8, jsonTqi.getAsJsonObject("weights").getAsJsonPrimitive("Characteristic 01").getAsDouble(), 0.001);
        Assert.assertEquals(0.2, jsonTqi.getAsJsonObject("weights").getAsJsonPrimitive("Characteristic 02").getAsDouble(), 0.001);

        Assert.assertEquals(0.4300, jsonChar01.getAsJsonPrimitive("value").getAsFloat(), 0.001);
        Assert.assertEquals(0.6, jsonChar01.getAsJsonObject("weights").getAsJsonPrimitive("Property 01").getAsDouble(), 0.001);
        Assert.assertEquals(0.4, jsonChar01.getAsJsonObject("weights").getAsJsonPrimitive("Property 02").getAsDouble(), 0.001);

        Assert.assertEquals(0.4894, jsonChar02.getAsJsonPrimitive("value").getAsFloat(), 0.001);
        Assert.assertEquals(0.5, jsonChar02.getAsJsonObject("weights").getAsJsonPrimitive("Property 01").getAsDouble(), 0.001);
        Assert.assertEquals(0.5, jsonChar02.getAsJsonObject("weights").getAsJsonPrimitive("Property 02").getAsDouble(), 0.001);

        Assert.assertEquals(0.1925, jsonProperty01.getAsJsonPrimitive("value").getAsFloat(), 0.001);
        Assert.assertEquals(0.0, jsonProperty01.getAsJsonArray("thresholds").get(0).getAsFloat(), 0.001);
        Assert.assertEquals(0.04, jsonProperty01.getAsJsonArray("thresholds").get(1).getAsFloat(), 0.001);
        Assert.assertEquals(0.1, jsonProperty01.getAsJsonArray("thresholds").get(2).getAsFloat(), 0.001);

        Assert.assertEquals(0.7863, jsonProperty02.getAsJsonPrimitive("value").getAsFloat(), 0.001);
        Assert.assertEquals(0.0, jsonProperty02.getAsJsonArray("thresholds").get(0).getAsFloat(), 0.001);
        Assert.assertEquals(0.06, jsonProperty02.getAsJsonArray("thresholds").get(1).getAsFloat(), 0.0001);
        Assert.assertEquals(0.1, jsonProperty02.getAsJsonArray("thresholds").get(2).getAsFloat(), 0.0001);

        Assert.assertEquals(0.0769, jsonMeasure01.getAsJsonPrimitive("value").getAsFloat(), 0.001);
        Assert.assertEquals(0.0256, jsonMeasure02.getAsJsonPrimitive("value").getAsFloat(), 0.001);
    }
}
